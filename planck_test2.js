
/* import "https://cdn.jsdelivr.net/npm/delaunator@4.0.1/delaunator.js"*/

var pl = planck, Vec2 = pl.Vec2, Math = pl.Math;
var width = 10.0
var height = width;
var BALL_RADIUS = width / 100 * 9
var ACTIVE_RAILS = true
var mouseForce = width * 40
/* var mouseForce = width * 10*/
var ARE_BULLETS = true

function bodies_of_world(w) {
  var arr = [];
  var b = w.getBodyList();

  while (b !== null) {
    arr.push(b)
    b = b.m_next
  }
  return arr
}


digit_coords = [

  [[-0.07043, 0.66913], [-0.16043, 0.66913], [-0.16043, 0.57913], [-0.25043, 0.57913], [-0.25043, 0.48913], [-0.34043, 0.48913], [-0.34043, 0.39913], [-0.52043, 0.39913], [-0.52043, 0.30913], [-0.61043, 0.30913], [-0.61043, 0.12913], [-0.70043, 0.12913], [-0.70043, 0.03913], [-0.79043, 0.03913], [-0.79043, -0.14087], [-0.88043, -0.14087], [-0.88043, -0.59087], [-0.79043, -0.59087], [-0.79043, -0.77087], [-0.70043, -0.77087], [-0.70043, -0.86087], [-0.61043, -0.86087], [-0.61043, -0.95087], [0.28957, -0.95087], [0.28957, -0.86087], [0.37957, -0.86087], [0.37957, -0.77087], [0.64957, -0.77087], [0.64957, -0.59087], [0.82957, -0.59087], [0.82957, -0.32087], [0.91957, -0.32087], [0.91957, 0.03913], [0.82957, 0.03913], [0.82957, 0.30913], [0.73957, 0.30913], [0.73957, 0.39913], [0.64957, 0.39913], [0.64957, 0.48913], [0.55957, 0.48913], [0.55957, 0.57913], [0.37957, 0.57913], [0.37957, 0.66913], [0.19957, 0.66913], [0.19957, 0.75913], [-0.07043, 0.75913]],
  [[0.18000, 0.64286], [0.09000, 0.64286], [0.09000, 0.46286], [0.00000, 0.46286], [0.00000, 0.19286], [-0.09000, 0.19286], [-0.09000, 0.01286], [-0.18000, 0.01286], [-0.18000, -0.25714], [-0.27000, -0.25714], [-0.27000, -0.52714], [-0.36000, -0.52714], [-0.36000, -0.88714], [-0.18000, -0.88714], [-0.18000, -0.70714], [-0.09000, -0.70714], [-0.09000, -0.52714], [0.00000, -0.52714], [0.00000, -0.25714], [0.09000, -0.25714], [0.09000, 0.10286], [0.18000, 0.10286], [0.18000, 0.28286], [0.27000, 0.28286], [0.27000, 0.55286], [0.36000, 0.55286], [0.36000, 0.91286], [0.18000, 0.91286]],
  /* [[-0.36000, 0.68226], [-0.18000, 0.68226], [-0.18000, 0.77226], [0.18000, 0.77226], [0.18000, 0.68226], [0.27000, 0.68226], [0.27000, 0.41226], [0.18000, 0.41226], [0.18000, 0.32226], [0.09000, 0.32226], [0.09000, 0.14226], [-0.09000, 0.14226], [-0.09000, 0.05226], [-0.18000, 0.05226], [-0.18000, -0.12774], [-0.27000, -0.12774], [-0.27000, -0.21774], [-0.45000, -0.21774], [-0.45000, -0.39774], [-0.63000, -0.39774], [-0.63000, -0.57774], [-0.72000, -0.57774], [-0.72000, -0.75774], [-0.63000, -0.75774], [-0.63000, -0.84774], [-0.18000, -0.84774], [-0.18000, -0.75774], [-0.09000, -0.75774], [-0.09000, -0.66774], [0.09000, -0.66774], [0.09000, -0.57774], [0.27000, -0.57774], [0.27000, -0.39774], [0.18000, -0.39774], [0.18000, -0.48774], [-0.09000, -0.48774], [-0.09000, -0.57774], [-0.27000, -0.57774], [-0.27000, -0.39774], [-0.09000, -0.39774], [-0.09000, -0.21774], [0.00000, -0.21774], [0.00000, -0.12774], [0.09000, -0.12774], [0.09000, -0.03774], [0.18000, -0.03774], [0.18000, 0.05226], [0.27000, 0.05226], [0.27000, 0.14226], [0.36000, 0.14226], [0.36000, 0.23226], [0.45000, 0.23226], [0.45000, 0.41226], [0.54000, 0.41226], [0.54000, 0.68226], [0.45000, 0.68226], [0.45000, 0.77226], [0.36000, 0.77226], [0.36000, 0.86226], [0.27000, 0.86226], [0.27000, 0.95226], [-0.36000, 0.95226]],*/
  [[-0.70920, 0.57600], [-0.61920, 0.57600], [-0.61920, 0.48600], [-0.34920, 0.48600], [-0.34920, 0.57600], [-0.16920, 0.57600], [-0.16920, 0.48600], [0.10080, 0.48600], [0.10080, 0.39600], [0.19080, 0.39600], [0.19080, 0.30600], [0.10080, 0.30600], [0.10080, 0.21600], [-0.07920, 0.21600], [-0.07920, 0.12600], [-0.16920, 0.12600], [-0.16920, 0.03600], [-0.07920, 0.03600], [-0.07920, -0.14400], [0.01080, -0.14400], [0.01080, -0.23400], [0.10080, -0.23400], [0.10080, -0.68400], [0.01080, -0.68400], [0.01080, -0.77400], [-0.52920, -0.77400], [-0.52920, -0.95400], [-0.25920, -0.95400], [-0.25920, -1.04400], [0.19080, -1.04400], [0.19080, -0.95400], [0.28080, -0.95400], [0.28080, -0.68400], [0.37080, -0.68400], [0.37080, -0.32400], [0.28080, -0.32400], [0.28080, -0.05400], [0.19080, -0.05400], [0.19080, 0.03600], [0.28080, 0.03600], [0.28080, 0.12600], [0.37080, 0.12600], [0.37080, 0.48600], [0.28080, 0.48600], [0.28080, 0.57600], [0.19080, 0.57600], [0.19080, 0.66600], [0.01080, 0.66600], [0.01080, 0.75600], [-0.70920, 0.75600]],
  /* [[0.54844, 0.81000], [0.45844, 0.81000], [0.45844, 0.54000], [0.36844, 0.54000], [0.36844, 0.36000], [0.27844, 0.36000], [0.27844, 0.18000], [0.18844, 0.18000], [0.18844, -0.00000], [0.09844, -0.00000], [0.09844, -0.18000], [-0.08156, -0.18000], [-0.08156, -0.09000], [-0.26156, -0.09000], [-0.26156, 0.09000], [-0.17156, 0.09000], [-0.17156, 0.18000], [-0.08156, 0.18000], [-0.08156, 0.54000], [-0.26156, 0.54000], [-0.26156, 0.36000], [-0.35156, 0.36000], [-0.35156, 0.18000], [-0.44156, 0.18000], [-0.44156, 0.09000], [-0.53156, 0.09000], [-0.53156, -0.00000], [-0.62156, -0.00000], [-0.62156, -0.09000], [-0.71156, -0.09000], [-0.71156, -0.27000], [-0.53156, -0.27000], [-0.53156, -0.18000], [-0.44156, -0.18000], [-0.44156, -0.27000], [-0.17156, -0.27000], [-0.17156, -0.36000], [-0.08156, -0.36000], [-0.08156, -0.54000], [-0.17156, -0.54000], [-0.17156, -0.72000], [-0.26156, -0.72000], [-0.26156, -0.90000], [-0.08156, -0.90000], [-0.08156, -0.81000], [0.00844, -0.81000], [0.00844, -0.63000], [0.09844, -0.63000], [0.09844, -0.45000], [0.18844, -0.45000], [0.18844, -0.36000], [0.27844, -0.36000], [0.27844, -0.09000], [0.36844, -0.09000], [0.36844, 0.09000], [0.45844, 0.09000], [0.45844, 0.27000], [0.54844, 0.27000], [0.54844, 0.54000], [0.63844, 0.54000], [0.63844, 0.81000], [0.72844, 0.81000], [0.72844, 0.90000], [0.54844, 0.90000]],*/
  [[-0.61448, 0.78207], [-0.70448, 0.78207], [-0.70448, 0.60207], [-0.61448, 0.60207], [-0.61448, 0.24207], [-0.70448, 0.24207], [-0.70448, -0.20793], [-0.61448, -0.20793], [-0.61448, -0.29793], [-0.34448, -0.29793], [-0.34448, -0.20793], [-0.25448, -0.20793], [-0.25448, -0.11793], [0.01552, -0.11793], [0.01552, -0.02793], [0.10552, -0.02793], [0.10552, 0.06207], [0.28552, 0.06207], [0.28552, -0.11793], [0.19552, -0.11793], [0.19552, -0.20793], [0.10552, -0.20793], [0.10552, -0.38793], [-0.07448, -0.38793], [-0.07448, -0.47793], [-0.43448, -0.47793], [-0.43448, -0.56793], [-0.61448, -0.56793], [-0.61448, -0.83793], [0.10552, -0.83793], [0.10552, -0.74793], [0.19552, -0.74793], [0.19552, -0.65793], [0.37552, -0.65793], [0.37552, -0.47793], [0.46552, -0.47793], [0.46552, -0.38793], [0.55552, -0.38793], [0.55552, -0.11793], [0.64552, -0.11793], [0.64552, 0.15207], [0.55552, 0.15207], [0.55552, 0.24207], [0.46552, 0.24207], [0.46552, 0.33207], [0.37552, 0.33207], [0.37552, 0.42207], [0.01552, 0.42207], [0.01552, 0.33207], [-0.07448, 0.33207], [-0.07448, 0.24207], [-0.25448, 0.24207], [-0.25448, 0.60207], [0.46552, 0.60207], [0.46552, 0.87207], [0.37552, 0.87207], [0.37552, 0.96207], [-0.61448, 0.96207]],
  [[-0.07393, 0.88393], [-0.25393, 0.88393], [-0.25393, 0.61393], [-0.34393, 0.61393], [-0.34393, 0.34393], [-0.43393, 0.34393], [-0.43393, 0.25393], [-0.34393, 0.25393], [-0.34393, 0.16393], [-0.16393, 0.16393], [-0.16393, 0.25393], [0.19607, 0.25393], [0.19607, -0.10607], [0.10607, -0.10607], [0.10607, -0.28607], [0.01607, -0.28607], [0.01607, -0.37607], [-0.07393, -0.37607], [-0.07393, -0.46607], [-0.16393, -0.46607], [-0.16393, -0.55607], [-0.25393, -0.55607], [-0.25393, -0.64607], [-0.34393, -0.64607], [-0.34393, -0.73607], [-0.43393, -0.73607], [-0.43393, -0.82607], [-0.16393, -0.82607], [-0.16393, -0.73607], [-0.07393, -0.73607], [-0.07393, -0.64607], [0.01607, -0.64607], [0.01607, -0.55607], [0.10607, -0.55607], [0.10607, -0.46607], [0.19607, -0.46607], [0.19607, -0.37607], [0.28607, -0.37607], [0.28607, -0.28607], [0.37607, -0.28607], [0.37607, -0.01607], [0.46607, -0.01607], [0.46607, 0.34393], [0.37607, 0.34393], [0.37607, 0.43393], [-0.07393, 0.43393], [-0.07393, 0.61393], [0.01607, 0.61393], [0.01607, 0.70393], [0.10607, 0.70393], [0.10607, 0.79393], [0.28607, 0.79393], [0.28607, 0.70393], [0.64607, 0.70393], [0.64607, 0.97393], [-0.07393, 0.97393]],
  [[0.03333, 0.79333], [-0.05667, 0.79333], [-0.05667, 0.70333], [-0.14667, 0.70333], [-0.14667, 0.61333], [-0.23667, 0.61333], [-0.23667, 0.43333], [-0.32667, 0.43333], [-0.32667, 0.34333], [-0.41667, 0.34333], [-0.41667, 0.07333], [-0.50667, 0.07333], [-0.50667, -0.10667], [-0.59667, -0.10667], [-0.59667, -0.73667], [-0.50667, -0.73667], [-0.50667, -0.82667], [-0.41667, -0.82667], [-0.41667, -0.91667], [0.21333, -0.91667], [0.21333, -0.82667], [0.30333, -0.82667], [0.30333, -0.73667], [0.39333, -0.73667], [0.39333, -0.64667], [0.48333, -0.64667], [0.48333, -0.55667], [0.57333, -0.55667], [0.57333, -0.37667], [0.48333, -0.37667], [0.48333, -0.28667], [0.39333, -0.28667], [0.39333, -0.19667], [0.21333, -0.19667], [0.21333, -0.10667], [0.03333, -0.10667], [0.03333, -0.19667], [-0.32667, -0.19667], [-0.32667, -0.10667], [-0.23667, -0.10667], [-0.23667, 0.16333], [-0.14667, 0.16333], [-0.14667, 0.25333], [-0.05667, 0.25333], [-0.05667, 0.43333], [0.03333, 0.43333], [0.03333, 0.52333], [0.12333, 0.52333], [0.12333, 0.61333], [0.39333, 0.61333], [0.39333, 0.79333], [0.30333, 0.79333], [0.30333, 0.88333], [0.03333, 0.88333]],
  [[0.19174, 0.64957], [0.10174, 0.64957], [0.10174, 0.46957], [-0.97826, 0.46957], [-0.97826, 0.37957], [-1.06826, 0.37957], [-1.06826, 0.19957], [-0.16826, 0.19957], [-0.16826, 0.28957], [0.01174, 0.28957], [0.01174, 0.19957], [-0.07826, 0.19957], [-0.07826, -0.07043], [-0.52826, -0.07043], [-0.52826, -0.16043], [-0.61826, -0.16043], [-0.61826, -0.25043], [-0.52826, -0.25043], [-0.52826, -0.34043], [-0.07826, -0.34043], [-0.07826, -0.79043], [-0.16826, -0.79043], [-0.16826, -0.97043], [0.01174, -0.97043], [0.01174, -0.79043], [0.10174, -0.79043], [0.10174, -0.34043], [0.55174, -0.34043], [0.55174, -0.25043], [0.64174, -0.25043], [0.64174, -0.16043], [0.73174, -0.16043], [0.73174, -0.07043], [0.46174, -0.07043], [0.46174, -0.16043], [0.28174, -0.16043], [0.28174, -0.07043], [0.19174, -0.07043], [0.19174, 0.37957], [0.28174, 0.37957], [0.28174, 0.46957], [0.37174, 0.46957], [0.37174, 0.64957], [0.28174, 0.64957], [0.28174, 0.73957], [0.19174, 0.73957]],
  [[-0.21600, 0.69840], [-0.48600, 0.69840], [-0.48600, 0.60840], [-0.57600, 0.60840], [-0.57600, 0.24840], [-0.48600, 0.24840], [-0.48600, 0.06840], [-0.57600, 0.06840], [-0.57600, -0.02160], [-0.66600, -0.02160], [-0.66600, -0.29160], [-0.75600, -0.29160], [-0.75600, -0.65160], [-0.66600, -0.65160], [-0.66600, -0.83160], [-0.57600, -0.83160], [-0.57600, -0.92160], [-0.48600, -0.92160], [-0.48600, -1.01160], [-0.21600, -1.01160], [-0.21600, -0.92160], [-0.12600, -0.92160], [-0.12600, -0.83160], [-0.03600, -0.83160], [-0.03600, -0.65160], [0.05400, -0.65160], [0.05400, -0.20160], [-0.03600, -0.20160], [-0.03600, -0.02160], [0.05400, -0.02160], [0.05400, 0.06840], [0.23400, 0.06840], [0.23400, 0.15840], [0.32400, 0.15840], [0.32400, 0.24840], [0.50400, 0.24840], [0.50400, 0.33840], [0.68400, 0.33840], [0.68400, 0.42840], [0.95400, 0.42840], [0.95400, 0.51840], [1.04400, 0.51840], [1.04400, 0.69840], [0.95400, 0.69840], [0.95400, 0.78840], [0.68400, 0.78840], [0.68400, 0.69840], [0.41400, 0.69840], [0.41400, 0.78840], [-0.21600, 0.78840]],
  [[0.11864, 0.87136], [-0.06136, 0.87136], [-0.06136, 0.78136], [-0.15136, 0.78136], [-0.15136, 0.60136], [-0.24136, 0.60136], [-0.24136, 0.51136], [-0.33136, 0.51136], [-0.33136, 0.42136], [-0.42136, 0.42136], [-0.42136, 0.06136], [-0.24136, 0.06136], [-0.24136, -0.02864], [-0.06136, -0.02864], [-0.06136, -0.20864], [-0.15136, -0.20864], [-0.15136, -0.38864], [-0.24136, -0.38864], [-0.24136, -0.56864], [-0.33136, -0.56864], [-0.33136, -0.65864], [-0.42136, -0.65864], [-0.42136, -0.83864], [-0.15136, -0.83864], [-0.15136, -0.74864], [-0.06136, -0.74864], [-0.06136, -0.65864], [0.02864, -0.65864], [0.02864, -0.47864], [0.11864, -0.47864], [0.11864, -0.38864], [0.20864, -0.38864], [0.20864, -0.20864], [0.29864, -0.20864], [0.29864, -0.02864], [0.38864, -0.02864], [0.38864, 0.24136], [0.47864, 0.24136], [0.47864, 0.33136], [0.56864, 0.33136], [0.56864, 0.42136], [0.65864, 0.42136], [0.65864, 0.96136], [0.11864, 0.96136]],

  ]

/* function triangulate(xys) {
 *   var triangles = Delaunator.from(xys).triangles
 *   var arr = []
 *   for (var i = 0; i < triangles.length / 3; i++) {
 *     arr.push([
 *       xys[triangles[i * 3 + 0]],
 *       xys[triangles[i * 3 + 1]],
 *       xys[triangles[i * 3 + 2]],
 *     ])
 *   }
 *   return arr
 * }*/
function triangulate(xys) {
  console.log(xys.length)
  var triangles = earcut(xys.reduce((a, b) => a.concat(b), []))
  console.log(triangles.length)
  var arr = []
  for (var i = 0; i < triangles.length / 3; i++) {
    arr.push([
      xys[triangles[i * 3 + 0]],
      xys[triangles[i * 3 + 1]],
      xys[triangles[i * 3 + 2]],
    ])
    /* break*/
  }
  console.log(arr.length)
  return arr
}

/* */
function createRails(world) {
  var thickness = width / 2
  def = {
    friction: 0.,
    restitution: 1,
  }
  var tl = Vec2(+(width * .5 + .0), +(height * .5 + .0))
  var tr = Vec2(+(width * .5 + thickness), +(height * .5 + thickness))
  var br = Vec2(+(width * .5 + thickness), -(height * .5 + thickness))
  var bl = Vec2(+(width * .5 + .0), -(height * .5 + .0))

  var b = world.createBody({userData: {type: "rail", idx: 0}})
  var shape = pl.Polygon([tl, tr, br, bl])
  /* var shape = pl.Polygon(zero.reverse())*/
  /* b.createFixture(zero, def)*/
  /* console.log(tl, tr, br, br)*/
  /* console.log(shape)*/
  /* for (var i = 0; i < zero.length; i++) {
   *   console.log(zero[i])
   *   var shape = pl.Polygon([
   *     Vec2(zero[i][0][0], zero[i][0][1]),
   *     Vec2(zero[i][1][0], zero[i][1][1]),
   *     Vec2(zero[i][2][0], zero[i][2][1]),
   *   ])
   *   b.createFixture(shape, def)
   * }*/
  b.createFixture(shape, def)
  b.setActive(ACTIVE_RAILS)

  var tl = Vec2(-(width * .5 + .0), +(height * .5 + .0))
  var tr = Vec2(-(width * .5 + thickness), +(height * .5 + thickness))
  var br = Vec2(-(width * .5 + thickness), -(height * .5 + thickness))
  var bl = Vec2(-(width * .5 + .0), -(height * .5 + .0))

  var b = world.createBody({userData: {type: "rail", idx: 0}})
  var shape = pl.Polygon([tl, tr, br, bl])
  b.createFixture(shape, def)
  b.setActive(ACTIVE_RAILS)

  var tl = Vec2(+(width * .5 + .0), -(height * .5 + .0))
  var tr = Vec2(+(width * .5 + thickness), -(height * .5 + thickness))
  var br = Vec2(-(width * .5 + thickness), -(height * .5 + thickness))
  var bl = Vec2(-(width * .5 + .0), -(height * .5 + .0))

  var b = world.createBody({userData: {type: "rail", idx: 0}})
  var shape = pl.Polygon([tl, tr, br, bl])
  b.createFixture(shape, def)
  b.setActive(ACTIVE_RAILS)

  var tl = Vec2(+(width * .5 + .0), +(height * .5 + .0))
  var tr = Vec2(+(width * .5 + thickness), +(height * .5 + thickness))
  var br = Vec2(-(width * .5 + thickness), +(height * .5 + thickness))
  var bl = Vec2(-(width * .5 + .0), +(height * .5 + .0))

  var b = world.createBody({userData: {type: "rail", idx: 0}})
  var shape = pl.Polygon([tl, tr, br, bl])
  b.createFixture(shape, def)
  b.setActive(ACTIVE_RAILS)

}

function createBalls(world) {
  const def = [
    [0, {fill: 'orange', stroke: 'black'}],
    [1, {fill: 'black', stroke: 'white'}],
    /* [2, {fill: 'purple', stroke: 'white'}],*/
    [3, {fill: 'green', stroke: 'white'}],
    /* [4, {fill: 'blue', stroke: 'white'}],*/
    [5, {fill: 'red', stroke: 'white'}],
    [5, {fill: 'red', stroke: 'white'}],
    [6, {fill: 'blue', stroke: 'white'}],
    [7, {fill: 'green', stroke: 'white'}],
    [8, {fill: 'purple', stroke: 'white'}],
    [9, {fill: 'black', stroke: 'white'}],
  ]
  var kx = 4
  var ky = 3
  var spacingx = (width - kx * BALL_RADIUS * 2) / (kx + 1)
  var ball_centroid_distancex = spacingx + BALL_RADIUS * 2
  var spacingy = (height - ky * BALL_RADIUS * 2) / (ky + 1)
  var ball_centroid_distancey = spacingy + BALL_RADIUS * 2

  console.log('spacing', spacingx, 'centroid dist', ball_centroid_distancex, spacingx * (kx + 1) + BALL_RADIUS * 2 * kx)
  console.log('spacing', spacingy, 'centroid dist', ball_centroid_distancey, spacingy * (ky + 1) + BALL_RADIUS * 2 * ky)

  for (var i = 0; i < def.length; i++) {
    var [digit, style] = def[i]

    var x = i % kx
    var y = Math.floor(i / kx)

    var x = x * ball_centroid_distancex
    var y = y * ball_centroid_distancey

    var x = x - width / 2 + spacingx + BALL_RADIUS
    var y = y - height / 2 + spacingy + BALL_RADIUS

    var x = x * 1
    var y = y * -1

    console.log(i, digit, style, {x: x, y: y})

    /* var b = world.createBody({*/
    var b = world.createDynamicBody({
      userData: {type: 'ball', digit: digit, idx: i},
      linearDamping: 1.5,
      angularDamping: 1
    });
    b.setBullet(ARE_BULLETS);
    b.setPosition({x: x, y: y});
    var shape = digit_coords[i]
    console.log(shape.length, shape[0])
    shape = triangulate(shape)
    console.log(shape.length, shape[0])
    for (var j = 0; j < shape.length; j++) {
      var poly = pl.Polygon([
        Vec2(shape[j][0][0], shape[j][0][1]),
        Vec2(shape[j][1][0], shape[j][1][1]),
        Vec2(shape[j][2][0], shape[j][2][1]),
      ])
      /* console.log("fixture", poly)*/
      b.createFixture(poly, {
        friction: 0.01,
        restitution: 0.3,
        density: 1,
        userData: 'ball'
      })
    }


    /* b.createFixture(pl.Circle(BALL_RADIUS), def);*/
    b.render = style;
  }
}

pl.internal.Settings.velocityThreshold = 0;
var world = pl.World({});
createRails(world)
createBalls(world)

var post_solve_count = 0
world.on('post-solve', function(contact) {
  var f0 = contact.getFixtureA()
  var f1 = contact.getFixtureB()
  var b0 = f0.getBody()
  var b1 = f1.getBody()
  var d0 = b0.getUserData()
  var d1 = b1.getUserData()
  /* console.log('> post-solve', post_solve_count, d0, d1)*/
  if (d0.type == 'ball' && d1.type == 'ball' && d0.digit + d1.digit == 10) {
    setTimeout(function() {
      world.destroyBody(b0);
      world.destroyBody(b1);
    }, 1)
  }
  post_solve_count = post_solve_count + 1
});

console.log('begin testbed')
planck.testbed('8 Ball', function(testbed) {
  console.log('begin testbed callback')
  testbed.x = 0;
  testbed.y = 0;
  testbed.width = width * 3;
  testbed.height = height * 3;
  testbed.ratio = 100;
  testbed.mouseForce = mouseForce;
  return world;

});

var bodies = bodies_of_world(world)
var [b] = bodies
